{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const authService = {\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  }\n};\nexport const studentService = {\n  getAll: async () => {\n    const response = await fetch(`${API_URL}/api/students`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch students');\n    }\n    return response.json();\n  },\n  getById: async id => {\n    const response = await fetch(`${API_URL}/api/students/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch student');\n    }\n    return response.json();\n  },\n  create: async data => {\n    const response = await api.post('/api/students', data);\n    return response.data;\n  },\n  update: async (id, data) => {\n    const response = await api.put(`/api/students/${id}`, data);\n    return response.data;\n  },\n  delete: async id => {\n    await api.delete(`/api/students/${id}`);\n  },\n  bulkImport: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/api/students/import', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  getVaccinationRecords: async studentId => {\n    const response = await api.get(`/api/students/${studentId}/vaccinations`);\n    return response.data;\n  },\n  addVaccinationRecord: async (studentId, data) => {\n    const response = await api.post(`/api/students/${studentId}/vaccinations`, data);\n    return response.data;\n  },\n  updateVaccinationRecord: async (studentId, recordId, data) => {\n    const response = await api.put(`/api/students/${studentId}/vaccinations/${recordId}`, data);\n    return response.data;\n  },\n  deleteVaccinationRecord: async (studentId, recordId) => {\n    await api.delete(`/api/students/${studentId}/vaccinations/${recordId}`);\n  }\n};\nexport const driveService = {\n  getAll: async () => {\n    const response = await api.get('/drives');\n    return response.data;\n  },\n  getById: async id => {\n    const response = await api.get(`/drives/${id}`);\n    return response.data;\n  },\n  create: async data => {\n    const response = await api.post('/drives', data);\n    return response.data;\n  },\n  update: async (id, data) => {\n    const response = await api.put(`/drives/${id}`, data);\n    return response.data;\n  },\n  delete: async id => {\n    await api.delete(`/drives/${id}`);\n  },\n  getUpcoming: async () => {\n    const response = await api.get('/api/drives/upcoming');\n    return response.data;\n  }\n};\nexport const dashboardService = {\n  getStats: async () => {\n    const response = await api.get('/api/dashboard/stats');\n    return response.data;\n  }\n};\n\n// Mock data for development\nconst mockData = {\n  stats: {\n    totalStudents: 150,\n    vaccinatedStudents: 95,\n    vaccinationRate: 63.3\n  },\n  upcomingDrives: [{\n    id: 1,\n    vaccineName: \"COVID-19 Booster\",\n    driveDate: \"2024-02-15\",\n    availableDoses: 100,\n    applicableGrades: [\"9\", \"10\", \"11\", \"12\"],\n    status: \"SCHEDULED\",\n    coordinatorId: \"coord123\",\n    location: \"School Auditorium\",\n    notes: \"Bring vaccination cards\",\n    vaccinatedStudentIds: []\n  }]\n};\n\n// Vaccination Record APIs\nexport const getVaccinationRecords = async studentId => {\n  const response = await fetch(`${API_URL}/api/vaccination-records?studentId=${studentId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch vaccination records');\n  }\n  return response.json();\n};\nexport const getVaccinationRecordById = async recordId => {\n  const response = await fetch(`${API_URL}/api/vaccination-records/${recordId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch vaccination record');\n  }\n  return response.json();\n};\nexport const createVaccinationRecord = async record => {\n  const response = await fetch(`${API_URL}/api/vaccination-records`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(record)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create vaccination record');\n  }\n  return response.json();\n};\nexport const updateVaccinationRecord = async (recordId, record) => {\n  const response = await fetch(`${API_URL}/api/vaccination-records/${recordId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(record)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update vaccination record');\n  }\n  return response.json();\n};\nexport const deleteVaccinationRecord = async recordId => {\n  const response = await fetch(`${API_URL}/api/vaccination-records/${recordId}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete vaccination record');\n  }\n};\n\n// Vaccine APIs\nexport const getVaccines = async () => {\n  const response = await fetch(`${API_URL}/api/vaccines`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch vaccines');\n  }\n  return response.json();\n};\n\n// Vaccination Drive APIs\nexport const getVaccinationDrives = async () => {\n  const response = await fetch(`${API_URL}/api/vaccination-drives`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch vaccination drives');\n  }\n  return response.json();\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","authService","login","credentials","response","post","data","studentService","getAll","fetch","ok","Error","json","getById","id","update","put","delete","bulkImport","file","formData","FormData","append","getVaccinationRecords","studentId","get","addVaccinationRecord","updateVaccinationRecord","recordId","deleteVaccinationRecord","driveService","getUpcoming","dashboardService","getStats","mockData","stats","totalStudents","vaccinatedStudents","vaccinationRate","upcomingDrives","vaccineName","driveDate","availableDoses","applicableGrades","status","coordinatorId","location","notes","vaccinatedStudentIds","getVaccinationRecordById","createVaccinationRecord","record","method","body","JSON","stringify","getVaccines","getVaccinationDrives"],"sources":["C:/Users/jesli/OneDrive/Desktop/BITS- 2nd Sem/FSAD/Assignment/vaccination-tracker/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n  LoginCredentials,\r\n  Student,\r\n  StudentFormData,\r\n  VaccinationDrive,\r\n  VaccinationDriveFormData,\r\n  VaccinationRecord,\r\n  VaccinationRecordFormData,\r\n  Vaccine,\r\n} from '../types';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\r\n\r\nconst api = axios.create({\r\n    baseURL: API_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Add token to requests if it exists\r\napi.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\nexport const authService = {\r\n    login: async (credentials: LoginCredentials) => {\r\n        const response = await api.post('/auth/login', credentials);\r\n        return response.data;\r\n    },\r\n};\r\n\r\nexport const studentService = {\r\n    getAll: async () => {\r\n        const response = await fetch(`${API_URL}/api/students`);\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch students');\r\n        }\r\n        return response.json();\r\n    },\r\n    getById: async (id: string) => {\r\n        const response = await fetch(`${API_URL}/api/students/${id}`);\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch student');\r\n        }\r\n        return response.json();\r\n    },\r\n    create: async (data: StudentFormData) => {\r\n        const response = await api.post<Student>('/api/students', data);\r\n        return response.data;\r\n    },\r\n    update: async (id: string, data: StudentFormData) => {\r\n        const response = await api.put<Student>(`/api/students/${id}`, data);\r\n        return response.data;\r\n    },\r\n    delete: async (id: string) => {\r\n        await api.delete(`/api/students/${id}`);\r\n    },\r\n    bulkImport: async (file: File) => {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        const response = await api.post('/api/students/import', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n        return response.data;\r\n    },\r\n    getVaccinationRecords: async (studentId: string) => {\r\n        const response = await api.get<VaccinationRecord[]>(`/api/students/${studentId}/vaccinations`);\r\n        return response.data;\r\n    },\r\n    addVaccinationRecord: async (studentId: string, data: VaccinationRecordFormData) => {\r\n        const response = await api.post<VaccinationRecord>(`/api/students/${studentId}/vaccinations`, data);\r\n        return response.data;\r\n    },\r\n    updateVaccinationRecord: async (studentId: string, recordId: string, data: VaccinationRecordFormData) => {\r\n        const response = await api.put<VaccinationRecord>(`/api/students/${studentId}/vaccinations/${recordId}`, data);\r\n        return response.data;\r\n    },\r\n    deleteVaccinationRecord: async (studentId: string, recordId: string) => {\r\n        await api.delete(`/api/students/${studentId}/vaccinations/${recordId}`);\r\n    }\r\n};\r\n\r\nexport const driveService = {\r\n    getAll: async () => {\r\n        const response = await api.get<VaccinationDrive[]>('/drives');\r\n        return response.data;\r\n    },\r\n    getById: async (id: string) => {\r\n        const response = await api.get<VaccinationDrive>(`/drives/${id}`);\r\n        return response.data;\r\n    },\r\n    create: async (data: VaccinationDriveFormData) => {\r\n        const response = await api.post<VaccinationDrive>('/drives', data);\r\n        return response.data;\r\n    },\r\n    update: async (id: string, data: VaccinationDriveFormData) => {\r\n        const response = await api.put<VaccinationDrive>(`/drives/${id}`, data);\r\n        return response.data;\r\n    },\r\n    delete: async (id: string) => {\r\n        await api.delete(`/drives/${id}`);\r\n    },\r\n    getUpcoming: async () => {\r\n        const response = await api.get('/api/drives/upcoming');\r\n        return response.data;\r\n    },\r\n};\r\n\r\nexport const dashboardService = {\r\n    getStats: async () => {\r\n        const response = await api.get('/api/dashboard/stats');\r\n        return response.data;\r\n    }\r\n};\r\n\r\n// Mock data for development\r\nconst mockData = {\r\n    stats: {\r\n        totalStudents: 150,\r\n        vaccinatedStudents: 95,\r\n        vaccinationRate: 63.3\r\n    },\r\n    upcomingDrives: [\r\n        {\r\n            id: 1,\r\n            vaccineName: \"COVID-19 Booster\",\r\n            driveDate: \"2024-02-15\",\r\n            availableDoses: 100,\r\n            applicableGrades: [\"9\", \"10\", \"11\", \"12\"],\r\n            status: \"SCHEDULED\" as const,\r\n            coordinatorId: \"coord123\",\r\n            location: \"School Auditorium\",\r\n            notes: \"Bring vaccination cards\",\r\n            vaccinatedStudentIds: []\r\n        }\r\n    ]\r\n};\r\n\r\n// Vaccination Record APIs\r\nexport const getVaccinationRecords = async (studentId: string): Promise<VaccinationRecord[]> => {\r\n    const response = await fetch(`${API_URL}/api/vaccination-records?studentId=${studentId}`);\r\n    if (!response.ok) {\r\n        throw new Error('Failed to fetch vaccination records');\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const getVaccinationRecordById = async (recordId: number): Promise<VaccinationRecord> => {\r\n    const response = await fetch(`${API_URL}/api/vaccination-records/${recordId}`);\r\n    if (!response.ok) {\r\n        throw new Error('Failed to fetch vaccination record');\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const createVaccinationRecord = async (record: Partial<VaccinationRecord>): Promise<VaccinationRecord> => {\r\n    const response = await fetch(`${API_URL}/api/vaccination-records`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(record),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Failed to create vaccination record');\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const updateVaccinationRecord = async (recordId: number, record: Partial<VaccinationRecord>): Promise<VaccinationRecord> => {\r\n    const response = await fetch(`${API_URL}/api/vaccination-records/${recordId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(record),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Failed to update vaccination record');\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const deleteVaccinationRecord = async (recordId: number): Promise<void> => {\r\n    const response = await fetch(`${API_URL}/api/vaccination-records/${recordId}`, {\r\n        method: 'DELETE',\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Failed to delete vaccination record');\r\n    }\r\n};\r\n\r\n// Vaccine APIs\r\nexport const getVaccines = async (): Promise<Vaccine[]> => {\r\n    const response = await fetch(`${API_URL}/api/vaccines`);\r\n    if (!response.ok) {\r\n        throw new Error('Failed to fetch vaccines');\r\n    }\r\n    return response.json();\r\n};\r\n\r\n// Vaccination Drive APIs\r\nexport const getVaccinationDrives = async (): Promise<VaccinationDrive[]> => {\r\n    const response = await fetch(`${API_URL}/api/vaccination-drives`);\r\n    if (!response.ok) {\r\n        throw new Error('Failed to fetch vaccination drives');\r\n    }\r\n    return response.json();\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}