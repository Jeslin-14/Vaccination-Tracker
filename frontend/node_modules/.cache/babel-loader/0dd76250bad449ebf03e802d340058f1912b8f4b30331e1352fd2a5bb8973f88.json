{"ast":null,"code":"import axios from'axios';const API_URL=process.env.REACT_APP_API_URL||'http://localhost:8080';const api=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// Add token to requests if it exists\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;});export const authService={login:async credentials=>{const response=await api.post('/api/auth/login',credentials);return response.data;}};export const studentService={getAll:async()=>{const response=await fetch(`${API_URL}/api/students`);if(!response.ok){throw new Error('Failed to fetch students');}return response.json();},getById:async id=>{const response=await fetch(`${API_URL}/api/students/${id}`);if(!response.ok){throw new Error('Failed to fetch student');}return response.json();},create:async data=>{const response=await api.post('/api/students',data);return response.data;},update:async(id,data)=>{const response=await api.put(`/api/students/${id}`,data);return response.data;},delete:async id=>{await api.delete(`/api/students/${id}`);},bulkImport:async file=>{const formData=new FormData();formData.append('file',file);const response=await api.post('/api/students/import',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},getVaccinationRecords:async studentId=>{const response=await api.get(`/api/students/${studentId}/vaccinations`);return response.data;},addVaccinationRecord:async(studentId,data)=>{const response=await api.post(`/api/students/${studentId}/vaccinations`,data);return response.data;},updateVaccinationRecord:async(studentId,recordId,data)=>{const response=await api.put(`/api/students/${studentId}/vaccinations/${recordId}`,data);return response.data;},deleteVaccinationRecord:async(studentId,recordId)=>{await api.delete(`/api/students/${studentId}/vaccinations/${recordId}`);}};export const driveService={getAll:async()=>{const response=await api.get('/api/drives');return response.data;},getById:async id=>{const response=await api.get(`/api/drives/${id}`);return response.data;},create:async data=>{const response=await api.post('/api/drives',data);return response.data;},update:async(id,data)=>{const response=await api.put(`/api/drives/${id}`,data);return response.data;},delete:async id=>{await api.delete(`/api/drives/${id}`);},getUpcoming:async()=>{const response=await api.get('/api/drives/upcoming');return response.data;}};export const dashboardService={getStats:async()=>{const response=await api.get('/api/dashboard/stats');return response.data;}};// Mock data for development\nconst mockData={stats:{totalStudents:150,vaccinatedStudents:95,vaccinationRate:63.3},upcomingDrives:[{id:1,vaccineName:\"COVID-19 Booster\",driveDate:\"2024-02-15\",availableDoses:100,applicableGrades:[\"9\",\"10\",\"11\",\"12\"],status:\"SCHEDULED\",coordinatorId:\"coord123\",location:\"School Auditorium\",notes:\"Bring vaccination cards\",vaccinatedStudentIds:[]}]};// Vaccination Record APIs\nexport const getVaccinationRecords=async studentId=>{const response=await fetch(`${API_URL}/api/vaccination-records?studentId=${studentId}`);if(!response.ok){throw new Error('Failed to fetch vaccination records');}return response.json();};export const getVaccinationRecordById=async recordId=>{const response=await fetch(`${API_URL}/api/vaccination-records/${recordId}`);if(!response.ok){throw new Error('Failed to fetch vaccination record');}return response.json();};export const createVaccinationRecord=async record=>{const response=await fetch(`${API_URL}/api/vaccination-records`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(record)});if(!response.ok){throw new Error('Failed to create vaccination record');}return response.json();};export const updateVaccinationRecord=async(recordId,record)=>{const response=await fetch(`${API_URL}/api/vaccination-records/${recordId}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(record)});if(!response.ok){throw new Error('Failed to update vaccination record');}return response.json();};export const deleteVaccinationRecord=async recordId=>{const response=await fetch(`${API_URL}/api/vaccination-records/${recordId}`,{method:'DELETE'});if(!response.ok){throw new Error('Failed to delete vaccination record');}};// Vaccine APIs\nexport const getVaccines=async()=>{const response=await api.get('/api/vaccines');return response.data;};// Vaccination Drive APIs\nexport const getVaccinationDrives=async()=>{const response=await api.get('/api/drives');return response.data;};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","authService","login","credentials","response","post","data","studentService","getAll","fetch","ok","Error","json","getById","id","update","put","delete","bulkImport","file","formData","FormData","append","getVaccinationRecords","studentId","get","addVaccinationRecord","updateVaccinationRecord","recordId","deleteVaccinationRecord","driveService","getUpcoming","dashboardService","getStats","mockData","stats","totalStudents","vaccinatedStudents","vaccinationRate","upcomingDrives","vaccineName","driveDate","availableDoses","applicableGrades","status","coordinatorId","location","notes","vaccinatedStudentIds","getVaccinationRecordById","createVaccinationRecord","record","method","body","JSON","stringify","getVaccines","getVaccinationDrives"],"sources":["C:/Users/jesli/OneDrive/Desktop/BITS- 2nd Sem/FSAD/Assignment/vaccination-tracker/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n  LoginCredentials,\r\n  Student,\r\n  StudentFormData,\r\n  VaccinationDrive,\r\n  VaccinationDriveFormData,\r\n  VaccinationRecord,\r\n  VaccinationRecordFormData,\r\n  Vaccine,\r\n} from '../types';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\r\n\r\nconst api = axios.create({\r\n    baseURL: API_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Add token to requests if it exists\r\napi.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\nexport const authService = {\r\n    login: async (credentials: LoginCredentials) => {\r\n        const response = await api.post('/api/auth/login', credentials);\r\n        return response.data;\r\n    },\r\n};\r\n\r\nexport const studentService = {\r\n    getAll: async () => {\r\n        const response = await fetch(`${API_URL}/api/students`);\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch students');\r\n        }\r\n        return response.json();\r\n    },\r\n    getById: async (id: string) => {\r\n        const response = await fetch(`${API_URL}/api/students/${id}`);\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch student');\r\n        }\r\n        return response.json();\r\n    },\r\n    create: async (data: StudentFormData) => {\r\n        const response = await api.post<Student>('/api/students', data);\r\n        return response.data;\r\n    },\r\n    update: async (id: string, data: StudentFormData) => {\r\n        const response = await api.put<Student>(`/api/students/${id}`, data);\r\n        return response.data;\r\n    },\r\n    delete: async (id: string) => {\r\n        await api.delete(`/api/students/${id}`);\r\n    },\r\n    bulkImport: async (file: File) => {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        const response = await api.post('/api/students/import', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n        return response.data;\r\n    },\r\n    getVaccinationRecords: async (studentId: string) => {\r\n        const response = await api.get<VaccinationRecord[]>(`/api/students/${studentId}/vaccinations`);\r\n        return response.data;\r\n    },\r\n    addVaccinationRecord: async (studentId: string, data: VaccinationRecordFormData) => {\r\n        const response = await api.post<VaccinationRecord>(`/api/students/${studentId}/vaccinations`, data);\r\n        return response.data;\r\n    },\r\n    updateVaccinationRecord: async (studentId: string, recordId: string, data: VaccinationRecordFormData) => {\r\n        const response = await api.put<VaccinationRecord>(`/api/students/${studentId}/vaccinations/${recordId}`, data);\r\n        return response.data;\r\n    },\r\n    deleteVaccinationRecord: async (studentId: string, recordId: string) => {\r\n        await api.delete(`/api/students/${studentId}/vaccinations/${recordId}`);\r\n    }\r\n};\r\n\r\nexport const driveService = {\r\n    getAll: async () => {\r\n        const response = await api.get<VaccinationDrive[]>('/api/drives');\r\n        return response.data;\r\n    },\r\n    getById: async (id: string) => {\r\n        const response = await api.get<VaccinationDrive>(`/api/drives/${id}`);\r\n        return response.data;\r\n    },\r\n    create: async (data: Omit<VaccinationDrive, '_id' | 'status'>) => {\r\n        const response = await api.post<VaccinationDrive>('/api/drives', data);\r\n        return response.data;\r\n    },\r\n    update: async (id: string, data: Partial<VaccinationDrive>) => {\r\n        const response = await api.put<VaccinationDrive>(`/api/drives/${id}`, data);\r\n        return response.data;\r\n    },\r\n    delete: async (id: string) => {\r\n        await api.delete(`/api/drives/${id}`);\r\n    },\r\n    getUpcoming: async () => {\r\n        const response = await api.get<VaccinationDrive[]>('/api/drives/upcoming');\r\n        return response.data;\r\n    },\r\n};\r\n\r\nexport const dashboardService = {\r\n    getStats: async () => {\r\n        const response = await api.get('/api/dashboard/stats');\r\n        return response.data;\r\n    }\r\n};\r\n\r\n// Mock data for development\r\nconst mockData = {\r\n    stats: {\r\n        totalStudents: 150,\r\n        vaccinatedStudents: 95,\r\n        vaccinationRate: 63.3\r\n    },\r\n    upcomingDrives: [\r\n        {\r\n            id: 1,\r\n            vaccineName: \"COVID-19 Booster\",\r\n            driveDate: \"2024-02-15\",\r\n            availableDoses: 100,\r\n            applicableGrades: [\"9\", \"10\", \"11\", \"12\"],\r\n            status: \"SCHEDULED\" as const,\r\n            coordinatorId: \"coord123\",\r\n            location: \"School Auditorium\",\r\n            notes: \"Bring vaccination cards\",\r\n            vaccinatedStudentIds: []\r\n        }\r\n    ]\r\n};\r\n\r\n// Vaccination Record APIs\r\nexport const getVaccinationRecords = async (studentId: string): Promise<VaccinationRecord[]> => {\r\n    const response = await fetch(`${API_URL}/api/vaccination-records?studentId=${studentId}`);\r\n    if (!response.ok) {\r\n        throw new Error('Failed to fetch vaccination records');\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const getVaccinationRecordById = async (recordId: number): Promise<VaccinationRecord> => {\r\n    const response = await fetch(`${API_URL}/api/vaccination-records/${recordId}`);\r\n    if (!response.ok) {\r\n        throw new Error('Failed to fetch vaccination record');\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const createVaccinationRecord = async (record: Partial<VaccinationRecord>): Promise<VaccinationRecord> => {\r\n    const response = await fetch(`${API_URL}/api/vaccination-records`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(record),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Failed to create vaccination record');\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const updateVaccinationRecord = async (recordId: number, record: Partial<VaccinationRecord>): Promise<VaccinationRecord> => {\r\n    const response = await fetch(`${API_URL}/api/vaccination-records/${recordId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(record),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Failed to update vaccination record');\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const deleteVaccinationRecord = async (recordId: number): Promise<void> => {\r\n    const response = await fetch(`${API_URL}/api/vaccination-records/${recordId}`, {\r\n        method: 'DELETE',\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Failed to delete vaccination record');\r\n    }\r\n};\r\n\r\n// Vaccine APIs\r\nexport const getVaccines = async (): Promise<Vaccine[]> => {\r\n    const response = await api.get('/api/vaccines');\r\n    return response.data;\r\n};\r\n\r\n// Vaccination Drive APIs\r\nexport const getVaccinationDrives = async (): Promise<VaccinationDrive[]> => {\r\n    const response = await api.get('/api/drives');\r\n    return response.data;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}